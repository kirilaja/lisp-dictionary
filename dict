;atom
(defun consp (x) (not (atom x)))

;eq
(defun null (x) (eq x '()))

;car
(defun first (x) (car x))
(defun caar (x) (car (car x)))   

;cdr
(defun rest (x) (cdr x))
(defun cddr (x) (cdr (cdr x)))

;cons
(defun acons (key val alist) (cons (cons key val) alist))

;atom equal 
(defun listp (x) (or (consp x) (null x)))

;equal rest
(defun nthcdr (x y) (if (null y) nil (if (= x 0) y (nthcdr (- x 1) (rest y)))))
(defun length (x) (if (null x) 0 (1+ (length (rest x)))))
(defun last (x) (if (= (length x) 1) x (last (rest x))))

;equal cons
(defun make-list (i s) (if (zerop i) nil (cons s (make-list (- i 1) s))))

;first rest
(defun cdar (x) (cdr (car x)))
(defun cadr (x) (car (cdr x)))
(defun second (x) (cadr x))
(defun cadar (x) (car (cdr (car x))))   

;equal first rest
(defun nth (x y) (if (null y) nil (if (= x 0) (first y) (nth (- x 1) (rest y))))) 
(defun member (x y) (if (null y) nil (if (eq x (first y)) y (member x (rest y)))))
(defun some (fn lst) (if (null lst) nil (or (funcall fn (first lst)) (some fn (rest lst)))))
(defun every (fn lst) (if (null lst) t (and (funcall fn (first lst)) (every fn (rest lst)))))
(defun assoc-if (fn a-list) (if (null a-list) nil (if (funcall fn (caar a-list)) (first a-list) (assoc-if fn (rest a-list)))))
(defun assoc-if-not (fn a-list) (if (null a-list) nil (if (not (funcall fn (caar a-list))) (first a-list) (assoc-if-not fn (rest a-list)))))
(defun rassoc-if (fn a-list) (if (null a-list) nil (if (funcall fn (cdar a-list)) (first a-list) (rassoc-if fn (rest a-list)))))
(defun rassoc-if-not (fn a-list) (if (null a-list) nil (if (not (funcall fn (cdar a-list))) (first a-list) (rassoc-if-not fn (rest a-list)))))

;equal rest cons
(defun maplist (fn lst) (if (null lst) nil (cons (funcall fn lst) (maplist fn (rest lst)))))

;atom equal first rest
(defun equal (x y) (if (or (and (atom x) (atom y) (eq x y)) (and (not (atom x)) (not (atom y)) (equal (first x) (first y)) (equal (rest x) (rest y)))) t))
(defun assoc (x a) (if (equal (caar a) x) (car a) (assoc x (cdr a))))
(defun rassoc (x a) (if (null a) nil (if (equal (cdar a) x) (first a) (rassoc x (rest a)))))

;equal first rest cons
(defun adjoin (x lst) (if (member x lst) lst (cons x lst)))
(defun pair (list) (if (null list) nil (cons (cons (first list) (cadr list)) (pair (cddr list)))))
(defun pairlis (x y a) (if (null x) a (cons (cons (car x) (car y)) (pairlis (cdr x) (cdr y) a))))
(defun append (x y) (if (null x) y (cons (first x) (append (rest x) y))))
(defun reverse (lst) (if (null lst) nil (append (reverse (rest lst)) (cons (first lst) '() ))))
(defun butlast (lst n) (reverse (nthcdr n (reverse lst))))
(defun union (x y) (if (null x) y (if (member (first x) y) (union (rest x) y) (if t (cons (first x) (union (rest x) y))))))
(defun intersection (x y) (if (null x) nil (if (member (first x) y) (cons (first x) (intersection (rest x) y)) (if t (intersection (rest x) y))))) 
(defun set-difference (x y) (if (null x) nil (if (not (member (first x) y)) (cons (first x) (set-difference (rest x) y)) (set-difference (rest x) y))))
(defun set-exclusive-or (lst1 lst2) (append (set-difference lst1 lst2) (set-difference lst2 lst1)))
(defun remove-duplicates (lst) (if (null lst) nil (if (member (first lst) (rest lst)) (remove-duplicates (rest lst)) (cons (first lst) (remove-duplicates (rest lst))))))
(defun mapcar (fn lst) (if (null lst) nil (cons (funcall fn (first lst)) (mapcar fn (rest lst)))))
(defun remove-if (fn lst) (if (null lst) nil (if (funcall fn (first lst)) (remove-if fn (rest lst)) (cons (first lst) (remove-if fn (rest lst))))))
(defun remove-if-not (fn lst) (if (null lst) nil (if (not (funcall fn (first lst))) (remove-if fn (rest lst)) (cons (first lst) (remove-if-not fn (rest lst))))))

;first rest cons atom
(defun copy-list (x) (if (atom x) x (cons (first x) (copy-list (rest x)))))
(defun copy-tree (x) (if (atom x) x (cons (copy-tree (first x)) (copy-tree (rest x)))))

;atom equal first rest cons
(defun subst (new old tree) (if (equal tree old) new (if (atom tree) tree (cons (subst new old (first tree)) (subst new old (rest tree)))))) ; does not work for dotted lists
(defun remove (obj lst) (if (null lst) nil (if (equal obj (first lst)) (remove obj (rest lst)) (cons (first lst) (remove obj (rest lst))))))
(defun sublis (a-lst y) (if (atom y) (if (null a-lst) y (if (eq (caar a-lst) y) (cdar a-lst) (sublis (rest a-lst) y))) (cons (sublis a-lst (first y)) (sublis a-lst (rest y)))))
(defun evalquote (fn x) (apply fn x NIL))
;                                                 then:                         
(defun apply (fn x a)
  (if (and (atom fn) (eq fn 'CAR))               (caar x)
  (if (and (atom fn) (eq fn 'CDR))               (cdar x)
  (if (and (atom fn) (eq fn 'CONS))              (cons (car x) (cadr x))
  (if (and (atom fn) (eq fn 'ATOM))              (atom (car x))
  (if (and (atom fn) (eq fn 'EQ))                (eq (car x) (cadr x))
  (if (and (atom fn) (not (or  (eq fn 'CAR)    
                               (eq fn 'CDR)
                               (eq fn 'CONS)
                               (eq fn 'ATOM)
                               (eq fn 'EQ))))    (apply (eval fn a) x a)
  (if (eq (car fn) 'LAMBDA)                      (eval (caddr fn) (pairlis (cadr fn) x a))
  (if (eq (car fn) 'LABEL)                       (apply (caddr fn) x (cons (cons (cadr fn) (caddr fn)) a)))))))))))
;                                                                         else
(defun eval (e a)
  (if (atom e)                                   (cdr (assoc e a))
  (if (and (atom (car e)) (eq (car e) 'QUOTE))   (cadr e)
  (if (and (atom (car e)) (eq (car e) 'COND))    (evcon (cdr e) a)       (apply (car e) (evlis (cdr e) a) a)))))  

;math
(defun abs (x) (if (> x 0) x (- 0 x)))
(defun plusp (x) (if (> x 0) t))
(defun minusp (x) (if (< x 0) t))
(defun >= (x y) (or (> x y) (= x y)))
(defun <= (x y) (or (< x y) (= x y)))
(defun /= (x y) (or (< x y) (> x y)))
(defun ! (i) (if (= i 0) 1 (* i (! (- i 1)))))
(defun min (lst) (if (or (null lst) (null (rest lst))) (first lst) (if (>= (first lst) (second lst)) (min (rest lst)) (min (cons (first lst) (cddr lst))))))
(defun max (lst) (if (or (null lst) (null (rest lst))) (first lst) (if (<= (first lst) (second lst)) (max (rest lst)) (max (cons (first lst) (cddr lst))))))

;lambda
(defun or (a b) (if a t (if t b)))
(defun not (x) (if x nil t))

;logic
(defun and (a b) (not (or (not a) (not b))))                           
(defun a-b (a b) (not (or (not a) b)))
(defun b-a (a b) (not (or (not b) a)))
(defun xor (a b) (or (not (or (not a) b)) (not (or (not b) a))))
(defun nor (a b) (not (or a b)))
(defun a==b (a b) (not (or (not (or (not a) b)) (not (or (not b) a)))))
(defun b->a (a b) (or (not b) a))
(defun a->b (a b) (or (not a) b))
(defun nand (a b) (not (and a b)))

;set
(defun rplaca (x y) (setf (car x) y))
(defun rplacd (x y) (setf (cdr x) y))
(defun nconc (lst1 lst2) (if (null lst1) lst2 (if (setf (rest (last lst1)) lst2) lst1)))
(defun pop (y) (let ((x (first y))) (setf y (rest y)) x))

;interpreter
(defun evcon (c a) (if (eval (caar c) a) (eval (cadar c) a) (evcon (rest c) a)))
(defun evlis (m a) (if (null m) nil (cons (eval (first m) a) (evlis (rest m) a))))
